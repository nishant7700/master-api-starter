{
  "Node Route File": {
    "prefix": "backend-route-file-generator",
    "body": [
      "import express from \"express\";",
      "const router = express.Router();",
      "import {",
      "  get$1s,",
      "  get$1ById,",
      "  delete$1,",
      "  create$1,",
      "  update$1,",
      "  getAll$1s,",
      "} from \"./$2Controller.js\";",
      "import { protect, admin } from \"../../middleware/authMiddleware.js\";",
      "",
      "router.route(\"/\").get(get$1s).post(protect, admin, create$1);",
      "router.route(\"/all\").get(getAll$1s);",
      "router",
      "  .route(\"/:id\")",
      "  .get(get$1ById)",
      "  .delete(protect, admin, delete$1)",
      "  .put(protect, admin, update$1);",
      "",
      "export default router;",
      ""
    ],
    "description": "Node Route File"
  },
  "Node Controller File": {
    "prefix": "backend-controller-file-generator",
    "body": [
      "import asyncHandler from \"express-async-handler\";",
      "import $1 from \"./$1Model.js\";",
      "",
      "// @desc    Fetch all $2s",
      "// @route   GET /api/$2s",
      "// @access  Public",
      "const get$1s = asyncHandler(async (req, res) => {",
      "  const pageSize = 10;",
      "  const page = Number(req.query.pageNumber) || 1;",
      "  console.log(req.query.start_from);",
      "   let searchParams = {};",
      "  if (req.query.searchTerm) {",
      "    searchParams[req.query.searchTerm] = {",
      "      $regex: req.query.keyword,",
      "      $options: \"i\",",
      "    };",
      "  }",
      "  if (req.query.start_from) {",
      "    if (searchParams.createdAt) {",
      "      searchParams[\"createdAt\"][\"$gte\"] = req.query.start_from;",
      "    } else {",
      "      searchParams[\"createdAt\"] = {};",
      "      searchParams[\"createdAt\"][\"$gte\"] = req.query.start_from;",
      "    }",
      "  }",
      "  if (req.query.start_to) {",
      "    if (searchParams.createdAt) {",
      "      searchParams[\"createdAt\"][\"$lte\"] = req.query.start_to;",
      "    } else {",
      "      searchParams[\"createdAt\"] = {};",
      "      searchParams[\"createdAt\"][\"$lte\"] = req.query.start_to;",
      "    }",
      "  }",
      "",
      "  const count = await $1.countDocuments({ ...searchParams });",
      "  const $2s = await $1.find({ ...searchParams })",
      "    .limit(pageSize)",
      "    .skip(pageSize * (page - 1))",
      "    .sort({ createdAt: -1 });",
      "",
      "  res.json({ $2s, page, pages: Math.ceil(count / pageSize), count: count });",
      "});",
      "// @desc    Fetch all $2s",
      "// @route   GET /api/$2s/all",
      "// @access  Public",
      "const getAll$1s = asyncHandler(async (req, res) => {",
      "  const $2s = await $1.find({}).sort({ createdAt: -1 });",
      "  res.json($2s);",
      "});",
      "",
      "// @desc    Fetch single $2",
      "// @route   GET /api/$2s/:id",
      "// @access  Public",
      "const get$1ById = asyncHandler(async (req, res) => {",
      "  const $2 = await $1.findById(req.params.id);",
      "",
      "  if ($2) {",
      "    res.json($2);",
      "  } else {",
      "    res.status(404);",
      "    throw new Error(\"$1 not found\");",
      "  }",
      "});",
      "",
      "// @desc    Delete a $2",
      "// @route   DELETE /api/$2s/:id",
      "// @access  Private/Admin",
      "const delete$1 = asyncHandler(async (req, res) => {",
      "  const $2 = await $1.findById(req.params.id);",
      "",
      "  if ($2) {",
      "    await $2.remove();",
      "    res.json({ message: \"$1 removed\" });",
      "  } else {",
      "    res.status(404);",
      "    throw new Error(\"$1 not found\");",
      "  }",
      "});",
      "",
      "// @desc    Create a $2",
      "// @route   POST /api/$2s",
      "// @access  Private/Admin",
      "const create$1 = asyncHandler(async (req, res) => {",
      "  var data = req.body;",
      "  const $2 = new $1(data);",
      "  const created$1 = await $2.save();",
      "  res.status(201).json(created$1);",
      "});",
      "",
      "// @desc    Update a $2",
      "// @route   PUT /api/$2s/:id",
      "// @access  Private/Admin",
      "const update$1 = asyncHandler(async (req, res) => {",
      "  const feed = req.body;",
      "",
      "  const data = await $1.findById(req.params.id);",
      "",
      "  if (data) {",
      "    Object.keys(feed).map((item, index) => {",
      "      data[item] = feed[item];",
      "    });",
      "",
      "    const updated$1 = await data.save();",
      "    res.json(updated$1);",
      "  } else {",
      "    res.status(404);",
      "    throw new Error(\"$1 not found\");",
      "  }",
      "});",
      "",
      "export {",
      "  get$1s,",
      "  get$1ById,",
      "  delete$1,",
      "  create$1,",
      "  update$1,",
      "  getAll$1s,",
      "};",
      ""
    ],
    "description": "Node Controller File"
  },
  "Node Model File": {
    "prefix": "backend-model-file-generator",
    "body": [
      "import mongoose from \"mongoose\";",
      "",
      "const $2Schema = mongoose.Schema(",
      "  {",
      "    user: {",
      "      type: mongoose.Schema.Types.ObjectId,",
      "      required: true,",
      "      ref: \"User\",",
      "    },",
      "    name: {",
      "      type: String,",
      "      required: true,",
      "    },",
      "    image: {",
      "      type: String,",
      "      required: true,",
      "    },",
      "    brand: {",
      "      type: String,",
      "      required: true,",
      "    },",
      "    category: {",
      "      type: String,",
      "      required: true,",
      "    },",
      "    description: {",
      "      type: String,",
      "      required: true,",
      "    },",
      "    rating: {",
      "      type: Number,",
      "      required: true,",
      "      default: 0,",
      "    },",
      "    numReviews: {",
      "      type: Number,",
      "      required: true,",
      "      default: 0,",
      "    },",
      "    price: {",
      "      type: Number,",
      "      required: true,",
      "      default: 0,",
      "    },",
      "    countInStock: {",
      "      type: Number,",
      "      required: true,",
      "      default: 0,",
      "    },",
      "  },",
      "  {",
      "    timestamps: true,",
      "  }",
      ");",
      "",
      "const $1 = mongoose.model(\"$3\", $2Schema);",
      "",
      "export default $1;",
      ""
    ],
    "description": "Node Model File"
  }
}
